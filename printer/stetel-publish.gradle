System.setProperty('java.awt.headless', 'false')
import groovy.swing.SwingBuilder
import java.nio.charset.StandardCharsets
apply plugin: 'maven-publish'
/*
 This Gradle file takes care of creating anything necessary to publish a library module to the Stetel Maven repository.

 Version: 0.9.7
 */
Properties stetelPublishProps = new Properties()
def stetelPublishFile = file('stetel-publish.properties')
if (!stetelPublishFile.exists()) {
    throw new GradleException("Missing file \'stetel-publish.properties\'. " +
            "Check https://maven.stetel.com/help.jsp")
}
stetelPublishProps.load(new FileInputStream(stetelPublishFile))
checkMandatoryProperty(stetelPublishProps, 'username')
checkMandatoryProperty(stetelPublishProps, 'groupId')
checkMandatoryProperty(stetelPublishProps, 'artifactId')
checkMandatoryProperty(stetelPublishProps, 'name')
checkMandatoryProperty(stetelPublishProps, 'description')
checkMandatoryProperty(stetelPublishProps, 'url')
checkMandatoryProperty(stetelPublishProps, 'inceptionYear')

android {
    buildTypes {
        all {
            if (!file('proguard-rules.pro').exists()) {
                throw new GradleException('You must provide a Proguard file named ' +
                        '\'proguard-rules.pro\' which contains the rules for your library, ' +
                        'otherwise the main app could crash.')
            }
            consumerProguardFiles 'proguard-rules.pro'
        }
    }
}

task sourcesJar(type: Jar, dependsOn: 'assembleRelease') {
    group BasePlugin.BUILD_GROUP
    description 'Package sources into a jar'
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
    if (stetelPublishProps.containsKey('excludeSources')) {
        exclude stetelPublishProps.getProperty('excludeSources').split(",")
    }
}

task javadocs(type: Javadoc, dependsOn: 'assembleRelease') {
    group BasePlugin.BUILD_GROUP
    description 'Generate Javadocs'
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    failOnError false
    if (stetelPublishProps.containsKey('excludeSources')) {
        exclude stetelPublishProps.getProperty('excludeSources').split(",")
    }
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    group BasePlugin.BUILD_GROUP
    description 'Package Javadocs into a jar'
    classifier = 'javadoc'
    from javadocs.destinationDir
    if (stetelPublishProps.containsKey('excludeSources')) {
        exclude stetelPublishProps.getProperty('excludeSources').split(",")
    }
}

task askStetelPublishMavenPassword {
    group = PublishingPlugin.PUBLISH_TASK_GROUP
    description = 'Prompt the developer to insert the Stetel Maven password (do not execute directly)'
    doLast {
        if (gradle.startParameter.taskNames.contains('publish') ||
                gradle.startParameter.taskNames.contains('publishReadme')) {
            def console = System.console()
            def stetelPublishMavenPassword
            def username = stetelPublishProps.getProperty('username')
            if (console) {
                stetelPublishMavenPassword = new String(console.readPassword("\nStetel Maven password for user '${username}': "))
            } else {
                println('Please insert the Stetel Maven password inside the popup window')
                new SwingBuilder().edt {
                    dialog(modal: true, title: 'Enter credentials', alwaysOnTop: true, resizable: false,
                            locationRelativeTo: null, pack: true, show: true
                    ) {
                        vbox {
                            label(text: " Stetel Maven password for user '${username}': ")
                            textField id: "passwordText", input = passwordField()
                            button(defaultButton: true, text: 'OK', actionPerformed: {
                                stetelPublishMavenPassword = passwordText.text
                                dispose()
                            })
                        }
                    }
                }
            }
            if (stetelPublishMavenPassword == null || stetelPublishMavenPassword.isEmpty()) {
                throw new GradleException('You must provide the password to access the Stetel Maven repository')
            } else {
                System.setProperty('stetelPublishMavenPassword', stetelPublishMavenPassword)
            }
        }
    }
}

publishing {
    publications {
        android.libraryVariants.stream().filter { variant ->
            variant.getName() != "debug" && !variant.getName().endsWith("Debug")
        }.forEach() { variant ->
            "${variant.getName()}"(MavenPublication) {
                groupId stetelPublishProps.getProperty('groupId')
                artifactId stetelPublishProps.getProperty('artifactId')
                if (variant.getName() == "release") {
                    version android.defaultConfig.versionName
                } else {
                    version android.defaultConfig.versionName + "-" + variant.getBaseName().replace("-release", "")
                }
                artifact tasks.getByName('bundle' + variant.getName().capitalize())
                artifact sourcesJar
                artifact javadocsJar
                pom.withXml {
                    def mainNode = asNode()
                    mainNode.appendNode('name', stetelPublishProps.getProperty('name'))
                    mainNode.appendNode('description', stetelPublishProps.getProperty('description'))
                    mainNode.appendNode('url', stetelPublishProps.getProperty('url'))
                    mainNode.appendNode('inceptionYear', stetelPublishProps.getProperty('inceptionYear'))
                    def dependenciesNode = mainNode.appendNode('dependencies')
                    List<MyDependency> myDependencies
                    try {
                        myDependencies = processDependencies(configurations.getByName("compile"),
                                myDependencies, false)
                    } catch (UnknownConfigurationException e) {
                        // compile not supported by this Gradle version
                    }
                    try {
                        myDependencies = processDependencies(configurations.getByName("api"),
                                myDependencies, false)
                        myDependencies = processDependencies(configurations.getByName("implementation"),
                                myDependencies, true)
                    } catch (UnknownConfigurationException e) {
                        // api/implementation not supported by this Gradle version
                    }
                    addPomDependencies(dependenciesNode, myDependencies)
                }
            }
        }
    }

    repositories {
        maven {
            credentials {
                username stetelPublishProps.getProperty('username')
                password getStetelMavenPassword()
            }
            url 'https://maven.stetel.com'
        }
    }
}

task publishReadme() {
    group = PublishingPlugin.PUBLISH_TASK_GROUP
    description = 'Upload the README file to the Maven repository'
    doLast {
        // get basic vars
        String groupId = stetelPublishProps.getProperty('groupId')
        String artifactId = stetelPublishProps.getProperty('artifactId')
        String basic = stetelPublishProps.getProperty('username') + ":" + getStetelMavenPassword()
        String authorization = basic.getBytes(StandardCharsets.UTF_8).encodeBase64().toString()
        StringBuilder urlBuilder = new StringBuilder("https://maven.stetel.com/")
                .append(groupId.replace(".", "/")).append("/").append(artifactId)
        // check if README file exists
        FileInputStream readmeIs
        def readmeFileMd = file('../README.md')
        def readmeFileTxt = file('../README.txt')
        if (readmeFileMd.exists()) {
            urlBuilder.append("/README.md")
            readmeIs = new FileInputStream(readmeFileMd)
        } else if (readmeFileTxt.exists()) {
            urlBuilder.append("/README.txt")
            readmeIs = new FileInputStream(readmeFileTxt)
        } else {
            throw new GradleException("Missing file \'README.md\' or 'README.txt'. " +
                    "Check https://maven.stetel.com/help.jsp")
        }
        println("Upload " + urlBuilder.toString())
        // read the README file into a var
        String postBody
        ByteArrayOutputStream output
        try {
            output = new ByteArrayOutputStream()
            byte[] buffer = new byte[1024]
            int length
            while ((length = readmeIs.read(buffer)) != -1) {
                output.write(buffer, 0, length)
            }
            postBody = output.toString("utf-8")
        } finally {
            if (output != null) {
                output.close()
            }
            if (readmeIs != null) {
                readmeIs.close()
            }
        }
        // perform the upload to the repository
        HttpURLConnection conn = (HttpURLConnection) new URL(urlBuilder.toString()).openConnection()
        conn.setReadTimeout(30000)
        conn.setConnectTimeout(30000)
        conn.setRequestMethod("PUT")
        conn.setUseCaches(false)
        conn.setDoInput(true)
        conn.setDoOutput(true)
        conn.setFixedLengthStreamingMode(postBody.length())
        conn.setRequestProperty("Authorization", "Basic " + authorization)
        conn.addRequestProperty("Content-Type", "text/plain")
        OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream(), "utf-8")
        writer.write(postBody)
        writer.close()
        if (conn.getResponseCode() != HttpURLConnection.HTTP_ACCEPTED) {
            throw new GradleException("Failed to upload the README file")
        }
    }
}

publish.finalizedBy(publishReadme)

String getStetelMavenPassword() {
    if (!System.hasProperty('stetelPublishMavenPassword')) {
        tasks.askStetelPublishMavenPassword.execute()
    }
    return System.getProperty('stetelPublishMavenPassword')
}

void checkMandatoryProperty(Properties props, String name) {
    if (!props.containsKey(name)) {
        throw new GradleException("Missing mandatory property '${name}' in file " +
                "'stetel-publish.properties\'. Check https://maven.stetel.com/help.jsp")
    }
}

List<MyDependency> processDependencies(Configuration configuration, List<MyDependency> myDependencies, boolean runtime) {
    if (myDependencies == null) {
        myDependencies = new ArrayList<>()
    }
    configuration.getDependencies().each { dep ->
        MyDependency foundDep = myDependencies.find { depEntry -> depEntry.isSameArtifact(dep)}
        if (foundDep == null) {
            myDependencies.add(new MyDependency(dep, runtime))
        } else if (foundDep.isVersionLower(dep)) {
            foundDep.setVersion(dep.getVersion())
        } else if (foundDep.isRuntime() && !runtime) {
            foundDep.setRuntime(false)
        }
    }
    return myDependencies
}

void addPomDependencies(dependenciesNode, List<MyDependency> myDependencies) {
    myDependencies.each { myDependency ->
        if (myDependency.isValid()) {
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', myDependency.getGroupId())
            dependencyNode.appendNode('artifactId', myDependency.getArtifactId())
            dependencyNode.appendNode('version', myDependency.getVersion())
            if (myDependency.isRuntime()) {
                dependencyNode.appendNode('scope', "runtime")
            }
            if (!myDependency.getExcludeRules().empty) {
                def exclusionsNode = dependencyNode.appendNode('exclusions')
                myDependency.getExcludeRules().each { ExcludeRule rule ->
                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                    exclusionNode.appendNode('groupId', rule.group)
                    exclusionNode.appendNode('artifactId', rule.module)
                }
            }
        }
    }
}

class MyDependency {
    String groupId
    String artifactId
    String version
    boolean runtime
    Set<ExcludeRule> excludeRules

    MyDependency(Dependency dependency, boolean runtime) {
        this.groupId = dependency.getGroup()
        this.artifactId = dependency.getName()
        this.version = dependency.getVersion()
        this.runtime = runtime
        this.excludeRules = dependency.properties.excludeRules
    }

    boolean isValid() {
        return groupId != null && artifactId != null && artifactId != "unspecified" && version != null
    }

    boolean isSameArtifact(Dependency depToCompare) {
        return this.groupId == depToCompare.getGroup() && this.artifactId == depToCompare.getName()
    }

    boolean isVersionLower(Dependency depToCompare) {
        return VersionNumber.parse(version) < VersionNumber.parse(depToCompare.getVersion())
    }

    @Override
    String toString() {
        return "MyDependency{" +
                "groupId='" + groupId + '\'' +
                ", artifactId='" + artifactId + '\'' +
                ", version='" + version + '\'' +
                ", runtime=" + runtime +
                ", excludeRules=" + excludeRules +
                '}'
    }
}